{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n// 完整的去中心化合约市场github地址：https://github.com/Fantom-foundation/Artion-Contracts/blob/5c90d2bc0401af6fb5abf35b860b762b31dfee02/contracts/FantomMarketplace.sol\r\n\r\n// 可以重构合约的点:\r\n// 1. 如何使用任意代币支付? (可以集成Chainlink Price Feeds)\r\n// 2. 以其他货币设定价格?\r\n\r\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price); // 买家支付的ETH不足\r\n// error ItemNotForSale(address nftAddress, uint256 tokenId);  // 物品没有在出售中\r\nerror NotListed(address nftAddress, uint256 tokenId); // 物品未上架\r\nerror AlreadyListed(address nftAddress, uint256 tokenId); // 物品已上架\r\nerror NoProceeds(); // 没有可提取的收益\r\nerror NotOwner(); // 调用者不是NFT的所有者\r\nerror NotApprovedForMarketplace(); // Marketplace合约未被授权操作该NFT\r\nerror PriceMustBeAboveZero(); // 价格必须大于0\r\nerror IsOwner(); // NFT的所有者不能购买自己的NFT\r\n\r\ncontract NftMarketplace {\r\n    /*\r\n     * @notice Listing Struct - 存储每个NFT的价格和卖家地址\r\n     * @param price 价格\r\n     * @param seller 卖家地址\r\n     */\r\n    struct Listing {\r\n        uint256 price;\r\n        address seller;\r\n    }\r\n\r\n    /*\r\n     * @notice Event for listing NFT\r\n     * @param seller 卖家地址\r\n     * @param nftAddress NFT合约地址\r\n     * @param tokenId NFT的Token ID\r\n     * @param price 价格\r\n     */\r\n    event ItemListed(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemCanceled(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ItemBought(\r\n        address indexed buyer,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        uint256 price\r\n    );\r\n    // NFT地址 => Token ID => Listing\r\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\r\n    // 存储每个卖家可提取的收益\r\n    mapping(address => uint256) private s_proceeds;\r\n\r\n    // 检查是否未上架\r\n    modifier notListed(address nftAddress, uint256 tokenId) {\r\n        Listing memory listing = s_listings[nftAddress][tokenId];\r\n        if (listing.price > 0) {\r\n            // 价格大于0，说明已上架\r\n            revert AlreadyListed(nftAddress, tokenId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // 检查是否已上架\r\n    modifier isListed(address nftAddress, uint256 tokenId) {\r\n        Listing memory listing = s_listings[nftAddress][tokenId];\r\n        if (listing.price <= 0) {\r\n            // 价格小于等于0，说明未上架\r\n            revert NotListed(nftAddress, tokenId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // 检查调用者是否是NFT的所有者\r\n    modifier isOwner(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        address spender\r\n    ) {\r\n        IERC721 nft = IERC721(nftAddress); // 获取NFT合约实例\r\n        address owner = nft.ownerOf(tokenId); // 调用ERC721的ownerOf方法获取NFT的所有者\r\n        if (spender != owner) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // 检查调用者是否是NFT的所有者, 所有者不能购买自己的NFT\r\n    modifier isNotOwner(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        address spender\r\n    ) {\r\n        IERC721 nft = IERC721(nftAddress);\r\n        address owner = nft.ownerOf(tokenId);\r\n        if (spender == owner) {\r\n            revert IsOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice 上架NFT\r\n     * @param nftAddress NFT合约地址\r\n     * @param tokenId NFT的Token ID\r\n     * @param price 价格\r\n     */\r\n    function listItem(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    )\r\n        external\r\n        notListed(nftAddress, tokenId) // 检查是否未上架\r\n        isOwner(nftAddress, tokenId, msg.sender) // 检查调用者是否是NFT的所有者\r\n    {\r\n        if (price <= 0) {\r\n            revert PriceMustBeAboveZero();\r\n        }\r\n        IERC721 nft = IERC721(nftAddress); // 获取NFT合约实例\r\n        // 检查Marketplace合约是否被NFT所有者授权操作该NFT\r\n        if (nft.getApproved(tokenId) != address(this)) {\r\n            revert NotApprovedForMarketplace();\r\n        }\r\n        // 记录上架NFT信息\r\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\r\n        // 触发上架事件\r\n        emit ItemListed(msg.sender, nftAddress, tokenId, price);\r\n    }\r\n\r\n    function cancelListing(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        isOwner(nftAddress, tokenId, msg.sender)\r\n        isListed(nftAddress, tokenId) // 检查是否已上架\r\n    {\r\n        delete (s_listings[nftAddress][tokenId]); // 从映射中删除上架信息\r\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\r\n    }\r\n\r\n    function buyItem(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        payable\r\n        isListed(nftAddress, tokenId)\r\n        isNotOwner(nftAddress, tokenId, msg.sender)\r\n    {\r\n        // 获取上架信息\r\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\r\n        // 检查买家支付的ETH是否足够\r\n        if (msg.value < listedItem.price) {\r\n            revert PriceNotMet(nftAddress, tokenId, listedItem.price);\r\n        }\r\n        // 将支付的ETH增加到卖家的收益中\r\n        s_proceeds[listedItem.seller] += msg.value;\r\n        // 从映射中删除上架信息（表示已售出）\r\n        delete (s_listings[nftAddress][tokenId]);\r\n        IERC721 nft = IERC721(nftAddress); // 获取NFT合约实例\r\n        nft.safeTransferFrom(   //  调用ERC721合约的 safeTransferFrom 方法，转移NFT所有权给买家\r\n            listedItem.seller, // 卖家地址\r\n            msg.sender, // 买家地址\r\n            tokenId\r\n        );\r\n        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\r\n    }\r\n\r\n    // 更新上架价格\r\n    function updateListing(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    )\r\n        external\r\n        isListed(nftAddress, tokenId)\r\n        isOwner(nftAddress, tokenId, msg.sender)\r\n    {\r\n        if (newPrice <= 0) {\r\n            revert PriceMustBeAboveZero();\r\n        }\r\n        s_listings[nftAddress][tokenId].price = newPrice;\r\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\r\n    }\r\n\r\n    // 提取收益\r\n    function withdrawProceeds() external {\r\n        // 检查卖家是否有可提取的收益\r\n        uint256 proceeds = s_proceeds[msg.sender];\r\n        if (proceeds <= 0) {\r\n            revert NoProceeds();\r\n        }\r\n        // 将收益转移给卖家，并重置为0\r\n        s_proceeds[msg.sender] = 0;\r\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    // 获取某个NFT的上架信息\r\n    function getListing(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    ) external view returns (Listing memory) {\r\n        return s_listings[nftAddress][tokenId];\r\n    }\r\n\r\n    // 获取某个卖家的可提取收益\r\n    function getProceeds(address seller) external view returns (uint256) {\r\n        return s_proceeds[seller];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}