{
  "language": "Solidity",
  "sources": {
    "contracts/GoalManage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract GoalManage {\r\n    enum GoalStatus {\r\n        Active,\r\n        Completed,\r\n        Failed\r\n    }\r\n\r\n    struct Goal {\r\n        address creator;\r\n        uint256 stakedAmount;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        string proofHash; // 证明文件哈希\r\n        GoalStatus status;\r\n        uint256 progress; // 0-100\r\n        address[] witnesses; // 见证者地址\r\n    }\r\n\r\n    uint256 public goalId;\r\n    // 存储每个目标的详细信息\r\n    mapping(uint256 => Goal) public goals;\r\n    // 记录每个用户的目标\r\n    mapping(address => uint256[]) public userGoals;\r\n    // 记录每个见证人是否确认\r\n    mapping(uint256 => mapping(address => bool)) public witnessConfirmed; // goalId => witness => bool\r\n    // 记录每个见证人是否已提取份额\r\n    mapping(uint256 => mapping(address => bool)) public hasWithdrawn; // goalId => witness => bool\r\n\r\n    event GoalCreated(\r\n        uint256 indexed goalId,\r\n        address creator,\r\n        uint256 stakedAmount,\r\n        uint256 endTime,\r\n        address[] witnesses\r\n    );\r\n    event ProgressUpdated(\r\n        uint256 indexed goalId,\r\n        uint256 newProgress,\r\n        string proofHash\r\n    );\r\n    event GoalCompleted(uint256 indexed goalId);\r\n    event GoalFailed(uint256 indexed goalId);\r\n    event WitnessConfirmed(uint256 indexed goalId, address witness);\r\n    event WithdrawnByCreator(\r\n        uint256 indexed goalId,\r\n        address creator,\r\n        uint256 amount\r\n    );\r\n    event WithdrawnByWitness(\r\n        uint256 indexed goalId,\r\n        address witness,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyGoalCreator(uint256 _goalId) {\r\n        require(msg.sender == goals[_goalId].creator, \"Not the goal creator.\");\r\n        _;\r\n    }\r\n\r\n    // modifier onlyGoalWitness(uint256 _goalId) {\r\n    //     require(\r\n    //         goals[_goalId].witnesses[msg.sender],\r\n    //         \"Not a witness for this goal\"\r\n    //     );\r\n    //     _;\r\n    // }\r\n\r\n    // 创建目标\r\n    function createGoal(\r\n        uint256 _stakedAmount,\r\n        uint256 _endTime,\r\n        address[] memory _witnesses\r\n    ) external payable {\r\n        require(msg.value > 0, \"Staking amount must be greater than 0\");\r\n        require(_endTime > block.timestamp, \"End time must be in the future\");\r\n\r\n        uint256 _goalId = goalId++;\r\n        goals[_goalId] = Goal({\r\n            creator: msg.sender,\r\n            stakedAmount: _stakedAmount,\r\n            startTime: block.timestamp,\r\n            endTime: _endTime,\r\n            proofHash: \"\",\r\n            status: GoalStatus.Active,\r\n            progress: 0,\r\n            witnesses: _witnesses\r\n        });\r\n\r\n        userGoals[msg.sender].push(_goalId);\r\n\r\n        emit GoalCreated(\r\n            _goalId,\r\n            msg.sender,\r\n            _stakedAmount,\r\n            _endTime,\r\n            _witnesses\r\n        );\r\n    }\r\n\r\n    // 更新目标进度\r\n    function updateProgress(\r\n        uint256 _goalId,\r\n        uint256 _newProgress,\r\n        string memory _proofHash\r\n    ) external onlyGoalCreator(_goalId) {\r\n        Goal storage goal = goals[_goalId];\r\n\r\n        require(goal.status == GoalStatus.Active, \"Goal is not active.\");\r\n        require(block.timestamp <= goal.endTime, \"Goal has ended.\");\r\n        require(_newProgress <= 100, \"Progress cannot exceed 100%.\");\r\n        require(\r\n            _newProgress > goals[_goalId].progress,\r\n            \"Progress cannot be decreased.\"\r\n        );\r\n\r\n        goal.progress = _newProgress;\r\n        goal.proofHash = _proofHash;\r\n        emit ProgressUpdated(_goalId, _newProgress, _proofHash);\r\n    }\r\n\r\n    function declareCompletion(uint256 _goalId) internal {\r\n        Goal storage goal = goals[_goalId];\r\n\r\n        require(msg.sender == goal.creator, \"Not the goal creator.\");\r\n        require(goal.status == GoalStatus.Active, \"Goal is not active.\");\r\n        require(block.timestamp > goal.endTime, \"Goal has not ended.\");\r\n        require(goal.progress == 100, \"Goal progress is not 100%\");\r\n\r\n        goal.status = GoalStatus.Completed;\r\n        emit GoalCompleted(_goalId);\r\n    }\r\n\r\n    function declareFailed(uint256 _goalId) internal {\r\n        Goal storage goal = goals[_goalId];\r\n\r\n        require(goal.status == GoalStatus.Active, \"Goal is not active.\");\r\n        require(block.timestamp > goal.endTime, \"Goal has not ended.\");\r\n\r\n        goal.status = GoalStatus.Failed;\r\n        emit GoalFailed(_goalId);\r\n    }\r\n\r\n    // 见证者确认\r\n    function witnessConfirm(uint256 _goalId) external {\r\n        Goal storage goal = goals[_goalId];\r\n\r\n        require(goal.status == GoalStatus.Active, \"Goal is not active.\");\r\n        require(block.timestamp <= goal.endTime, \"Goal has ended.\");\r\n\r\n        // 检查调用者是否是见证人\r\n        bool isWitness = false;\r\n        for (uint256 i = 0; i < goal.witnesses.length; i++) {\r\n            if (goal.witnesses[i] == msg.sender) {\r\n                isWitness = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(isWitness, \"Not a witness for this goal\");\r\n        witnessConfirmed[_goalId][msg.sender] = true;\r\n        emit WitnessConfirmed(_goalId, msg.sender);\r\n    }\r\n\r\n    // 创建人提取份额\r\n    function withdrawByCreator(\r\n        uint256 _goalId\r\n    ) external onlyGoalCreator(_goalId) {\r\n        Goal storage goal = goals[_goalId];\r\n        require(msg.sender == goal.creator, \"Not the goal creator.\");\r\n        require(goal.status == GoalStatus.Completed, \"Goal is not completed.\");\r\n        require(block.timestamp > goal.endTime, \"Goal has ended.\");\r\n\r\n        // 检查多少个见证人确认\r\n        uint256 confirmedCount = 0;\r\n        for (uint256 i = 0; i < goal.witnesses.length; i++) {\r\n            if (witnessConfirmed[_goalId][goal.witnesses[i]]) {\r\n                confirmedCount++;\r\n            }\r\n        }\r\n\r\n        // 检查是否超过一半确认\r\n        require(\r\n            confirmedCount >= goal.witnesses.length / 2,\r\n            \"Not enough witnesses confirmed.\"\r\n        );\r\n        goal.status = GoalStatus.Completed;\r\n        uint256 amount = goal.stakedAmount;\r\n        goal.stakedAmount = 0; // 防止重入\r\n        // payable(msg.sender).transfer(amount);\r\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n        emit GoalCompleted(_goalId);\r\n        emit WithdrawnByCreator(_goalId, msg.sender, amount);\r\n    }\r\n\r\n    // 见证者提取份额(目标失败时)\r\n    function withdrawByWitness(uint256 _goalId) external {\r\n        Goal storage goal = goals[_goalId];\r\n        require(goal.status == GoalStatus.Failed, \"Goal is not failed.\");\r\n        require(block.timestamp > goal.endTime, \"Goal has ended.\");\r\n        // 检查调用者是否是见证人\r\n        bool isWitness = false;\r\n        for (uint256 i = 0; i < goal.witnesses.length; i++) {\r\n            if (goal.witnesses[i] == msg.sender) {\r\n                isWitness = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(isWitness, \"Not a witness for this goal\");\r\n        require(\r\n            hasWithdrawn[_goalId][msg.sender] == false,\r\n            \"Already withdrawn\"\r\n        );\r\n\r\n        uint256 sharePerWitness = goal.stakedAmount / goal.witnesses.length;\r\n        uint256 remainderAmount = goal.stakedAmount % goal.witnesses.length;\r\n        // 将余数返还给目标创建者\r\n        if (remainderAmount > 0) {\r\n            payable(goal.creator).transfer(remainderAmount);\r\n        }\r\n        goal.stakedAmount -= sharePerWitness;\r\n        hasWithdrawn[_goalId][msg.sender] = true;\r\n        (bool success, ) = payable(msg.sender).call{value: sharePerWitness}(\"\");\r\n        require(success, \"Witness withdraw failed\");\r\n        emit WithdrawnByWitness(_goalId, msg.sender, sharePerWitness);\r\n    }\r\n\r\n    function getUserGoals(address _user) external view returns (uint256[] memory) {\r\n        return userGoals[_user];\r\n    }\r\n\r\n    function getGoal(uint256 _goalId) external view returns (Goal memory) {\r\n        Goal storage goal = goals[_goalId];\r\n        return goal;\r\n    }\r\n\r\n    //     function getGoal(uint256 _goalId) public view returns (\r\n    //     address publisher,\r\n    //     uint256 stakedAmount,\r\n    //     address stakingToken,\r\n    //     uint256 startTime,\r\n    //     uint256 endTime,\r\n    //     uint256 currentProgress,\r\n    //     string memory proofIpfsHash,\r\n    //     address memory witnessList,\r\n    //     uint256 confirmationsCount,\r\n    //     uint256 requiredConfirmations,\r\n    //     GoalStatus status\r\n    // ) {\r\n    //     Goal storage goal = goals[_goalId];\r\n    //     publisher = goal.publisher;\r\n    //     stakedAmount = goal.stakedAmount;\r\n    //     stakingToken = goal.stakingToken;\r\n    //     startTime = goal.startTime;\r\n    //     endTime = goal.endTime;\r\n    //     currentProgress = goal.currentProgress;\r\n    //     proofIpfsHash = goal.proofIpfsHash;\r\n    //     witnessList = goal.witnessAddresses; // Return the array of witness addresses\r\n    //     confirmationsCount = goal.confirmationsCount;\r\n    //     requiredConfirmations = goal.requiredConfirmations;\r\n    //     status = goal.status;\r\n    // }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}